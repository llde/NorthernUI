#include "Patches/HUDInfoMenu.h"
//
#include "Patches/XboxGamepad/Main.h"
#include "ReverseEngineered/Forms/Actor.h"
#include "ReverseEngineered/Forms/TESObjectREFR.h"
#include "ReverseEngineered/Systems/Input.h"
#include "ReverseEngineered/Systems/Timing.h"
#include "ReverseEngineered/UI/Tile.h"
#include "ReverseEngineered/UI/Menus/HUDInfoMenu.h"
#include "obse/GameMenus.h"
#include "obse/Utilities.h"
#include "obse_common/SafeWrite.h"

namespace CobbPatches {
   namespace HUDInfoMenu {
      void GetKeycodes(UInt32* outPC, UInt32* outXbox) {
         auto input = RE::Singleton00B33398::GetInstance()->unk20;
         UInt32 pc = input->keyboard[RE::kControl_Activate];
         if (pc == 0 || pc == 0xFF) {
            pc = input->mouse[RE::kControl_Activate];
            if (pc == 0xFF)
               pc = 0;
            else
               pc += 0x100; // mouse raw button index to DXScanCode
         }
         UInt32 xbox = 0;
         if (g_xInputPatchApplied)
            xbox = XInputControlBindingToDXScanCode(input->joystick[RE::kControl_Activate]);
         *outPC   = pc;
         *outXbox = xbox;
      };

      struct _CachedHUDInfo {
         UInt32 lastUpdate = 0;
         UInt8  formType   = 0;
         bool   isActor    = false;
         bool   isDead     = false; // actors coming back to life is rare, so we can check for that more lazily
         bool   isArrow    = false; // it's never a crime to take arrow-projectiles, but we have to dynamic-cast to check for them and treat them as a special case
         //
         struct {
            bool canYield = false;
         } displayed;

         void Reset(UInt32 now) {
            this->formType = 0;
            this->isActor  = false;
            this->isDead   = false;
            this->isArrow  = false;
            this->lastUpdate = now;
         };
         inline bool ShouldUpdate(UInt32 now) {
            return (now - this->lastUpdate) > 1000;
         };
         void UpdateFrom(RE::TESObjectREFR* target, UInt32 now) {
            this->Reset(now);
            //
            auto base = target->GetBaseForm();
            if (!base)
               return;
            auto id = this->formType = base->typeID;
            switch (id) {
               case kFormType_NPC:
               case kFormType_Creature:
                  this->isActor = true;
                  break;
               case kFormType_REFR:
                  this->isArrow = !!OBLIVION_CAST(target, TESObjectREFR, ArrowProjectile);
                  break;
            }
         };
      };
      static _CachedHUDInfo s_cachedInfo;

      UInt32 Inner(RE::TESObjectREFR* target) {
         UInt32    iconEnum = 0;
         auto      menu     = (RE::HUDInfoMenu*) *g_HUDInfoMenu;
         RE::Tile* tile     = nullptr;
         if (menu)
            tile = (RE::Tile*) menu->tile;
         if (!tile)
            return iconEnum;
         {  // Pass the keymappings for the Activate control, so that we can display them in the UI.
            static UInt32 priorPC   = 0;
            static UInt32 priorXbox = 0;
            UInt32 pc;
            UInt32 xbox;
            GetKeycodes(&pc, &xbox);
            if (pc != priorPC) {
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user17, pc);
               priorPC = pc;
            }
            if (xbox != priorXbox) {
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user18, xbox);
               priorXbox = xbox;
            }
         }
         UInt32 now     = RE::g_timeInfo->unk10;
         bool   updated = false;
         if (target) {
            if (target != menu->target || s_cachedInfo.ShouldUpdate(now)) {
               //
               // Cache information about the thing the player is aiming at, if they're aiming at a different 
               // thing than they were last frame or if it's just been some time since we last cached.
               //
               updated = true;
               s_cachedInfo.UpdateFrom(target, now);
            }
            //
            //
            bool isActor     = s_cachedInfo.isActor;
            bool isLiveActor = false;
            if (isActor) {
               if (!s_cachedInfo.isDead)
                  //
                  // If the actor is alive, we want to update to "dead" the instant they die, because it's 
                  // very likely for actors to die while the player is aiming at them (*ahem*). It is quite 
                  // a bit less likely for actors to come back to life, so we can afford to use throttled 
                  // checking for resurrection.
                  //
                  isLiveActor = !(s_cachedInfo.isDead = target->IsDead(0));
            }
            iconEnum = CALL_MEMBER_FN(target, GetHUDReticleIconEnum)(); // the call that we patched over
            //
            //
            if (updated) {
               //
               // For things we should update "lazily," i.e. if the player looks at something else 
               // or every second otherwise
               //
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user19, s_cachedInfo.formType); // NorthernUI: Form type
               if (s_cachedInfo.isArrow)
                  CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user20, 1.0F); // scavenging a used arrow is never a crime
            }
            //
            //
            {  // Activating would be a crime?
               if (!s_cachedInfo.isArrow) { // scavenging a used arrow is never a crime
                  CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user20, CALL_MEMBER_FN(target, ActivatingWouldBeACrime)() ? 2.0F : 1.0F);
               } // else it was handled in the (updated) branch above
            }
            CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user21, iconEnum); // NorthernUI: HUDReticle icon enum
            CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user22, CALL_MEMBER_FN(target, GetOpenState)());
            {  // Vars related to the reference being a lootable container
               SInt8 v = 0;
               v |= (!isLiveActor && target->IsEmpty()); // flag 0x0001: reference is empty and not a live actor
               v |= (isActor && !isLiveActor) << 1;      // flag 0x0002: reference is a dead actor
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user23, v);
            }
            {  // Vars related to the reference not being interactable
               auto tActor = isLiveActor ? (RE::Actor*)target : nullptr;
               bool canBeInteracted = true;
               RE::CombatController* combatController = nullptr;
               //
               if (tActor && (combatController = tActor->GetCombatController()) && !combatController->IsCalmed()) { // Whether the player can yield
                  auto   input    = RE::Singleton00B33398::GetInstance()->unk20;
                  bool   block    = CALL_MEMBER_FN(input, QueryControlState)(RE::kControl_Block, RE::kKeyQuery_Hold);
                  auto&  canYield = s_cachedInfo.displayed.canYield;
                  bool   changed  = block != canYield;
                  //
                  if (changed) {
                     canYield = false;
                     if (CALL_MEMBER_FN(combatController, TargetsIncludeActor)((RE::Actor*) *g_thePlayer))
                        canYield = true;
                     CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user15, canYield ? 2.0F : 1.0F);
                  }
                  canBeInteracted &= block;
               } else if (s_cachedInfo.displayed.canYield) {
                  s_cachedInfo.displayed.canYield = false;
                  CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user15, 1.0F);
               }
               //
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user16, canBeInteracted ? 1.0F : 2.0F); // &true; if it CANNOT be interacted with.
            }
         } else {
            if (menu->target || s_cachedInfo.ShouldUpdate(now)) {
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user16, 1.0F); // cannot be interacted with (reset to default: false)
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user19, 0.0F); // form type
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user20, 1.0F); // activating would be a crime?
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user21, 0.0F); // icon enum
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user22, 0.0F); // open-state
               CALL_MEMBER_FN(tile, UpdateFloat)(kTileValue_user23, 1.0F); // is empty and a lootable container?
            }
            s_cachedInfo.Reset(now);
         }
         return iconEnum;
      };
      __declspec(naked) void HorseFix() {
         //
         // The vanilla game checks if the object you're aiming at is a horse, and 
         // if it's being ridden. If so, it performs certain actions on the rider 
         // instead. However, these checks are made after the game has already 
         // retrieved the horse's name and icon-enum. I want them made before, so 
         // I'm just recreating them almost instruction-for-instruction and using 
         // a hook to force them to run as soon as we know we're aiming at some-
         // thing.
         //
         __asm {
            // ecx already == edi
            //
            // Code here recreates branch at 005A4B4C. We'll end up running the code 
            // redundantly, but oh well.
            //
            // Disposable registers: eax, ecx, edx, esi
            //
            mov  eax, 0x004D74D0; // TESObjectREFR::IsHorse
            call eax;
            test al, al;
            jz   lFinish;
            mov  eax, dword ptr [edi];
            mov  eax, dword ptr [eax + 0x388];
            mov  ecx, edi;
            call eax; // auto eax = edi->Unk_E2(); // presumably "get rider"
            mov  esi, eax;
            test esi, esi;
            jz   lFinish;
            mov  eax, g_thePlayer;
            mov  eax, dword ptr [eax];
            cmp  esi, eax;
            je   lFinish;
            mov  eax, dword ptr [esi];
            mov  eax, dword ptr [eax + 0x198];
            push 0;
            mov  ecx, esi;
            call eax; // bool eax = esi->IsDead(0);
            test al, al;
            jnz  lFinish;
            mov  ecx, dword ptr [esi + 0x58];
            test ecx, ecx;
            jz   lFinish;
            mov  eax, dword ptr [ecx];
            mov  eax, dword ptr [eax + 0x36C];
            call eax; // eax = esi->process->Unk_DB();
            cmp  eax, 4;
            jne  lFinish;
            mov  edi, esi;
         lFinish:
            mov  ecx, edi; // reproduce patched-over call
            mov  eax, 0x004DA2A0; // const char* TESObjectREFR::GetFullName();
            call eax;
            mov  ecx, 0x005A49D8; // exit
            jmp  ecx;
         };
      };
      __declspec(naked) void Outer() {
         __asm {
            push ecx;    //
            call Inner;  //
            add  esp, 4; // auto eax = Inner(edi);
            mov  ecx, 0x005A4AE0; //
            jmp  ecx;             // // keep eax; the code we return to will use it
         };
      };

      bool Apply() {
         WriteRelJump(0x005A4ADB, (UInt32)&Outer); // patch over a call to TESObjectREFR::GetHUDReticleIconEnum
         WriteRelJump(0x005A49D3, (UInt32)&HorseFix);
         return true;
      };
   };
};