void HUDMainMenu::HandleFrame() {
   auto ebp   = this;
   auto esp20 = this;
   if (!(*g_thePlayer)->GetParentCell())
      return;
   ebx = 0;
   Tile* esi = this->tileCompassHeading;
   Tile* esp28 = esi;
   if (auto ecx = this->tileLevelUpIcon) {
      ecx->UpdateFloat(kTagID_visible, (*g_thePlayer)->unk1DC ? 1.0F : 2.0F);
   }
   if (this->tileGrabZone) { // at 0x005A6E57
      //
      // ... big four ...
      //
   }
   // at 0x005A6EBC
   if (this->tileCompassHeading) { // at 0x005A6EC5
      NiVector3& eax = (*g_thePlayer)->GetPos();
      NiVector3  playerPos = eax; // esp5C
      float esp4C = (*g_thePlayer)->GetParentCell()->sub004CCE00();
      float esp2C = (*g_thePlayer)->GetYaw() + esp4C * 57.295776367178750;
      float a = esp2C;
      esp2C = fabs(esp2C);
      SInt32 eax = esp2C / 360.0;
      eax *= 168;
      esp2C = eax;
      float esp30 = a - (float)esp2C;
      this->tileCompassWindow->UpdateFloat(kTagID_user0, esp30); // heading, in degrees
      auto eax = (*g_thePlayer)->sub0065D260();
      NiTList<Tile*>::Node* compassChild = esi->childList.start; // esp18 // compass heading children
      esp1C = 1; // icon depth
      if (eax) {
         do {
            ecx = esp2C;
            edi = *ecx;
            if (!edi) // at 0x005A6F9B
               break;
            edx   = ecx->unk04;
            esp2C = edx;
            TESObjectREFR* eax = edi->unk04;
            if (eax->flags & 0x800) // if marker is disabled
               continue;
            NiVector3& eax = eax->GetPos();
            float esp34 = distance between eax and playerPos; // inlined // at 0x005A700F
            esp34 = esp34; // m'kay
            ExtraMapMarker::Data* ecx = edi->unk00;
            bool esp17 = false;
            esp34 = fabs(esp34);
            float esp24 = esp34;
            if (!ecx->IsVisible()) {
               if (GMST:iMapMarkerRevealDistance > esp24) {
                  edi->unk00->sub0042B320();
                  edi->unk04->Unk_10(0x400);
                  esp17 = true;
               }
            }
            // at 0x005A706C
            if (!edi->unk00->AllowsFastTravel()) {
               if (GMST:iMapMarkerRevealDistance > esp24) {
                  edi->unk00->sub0042B350();
                  edi->unk04->Unk_10(0x400);
                  esp17 = true;
               }
            }
            // at 0x005A70A9
            if (esp17 && !(*g_thePlayer)->IsDead(0)) {
               BSStringT esp38;
               SprintfBSStringT(&esp38, "%s %s.", GMST:sDiscoveredText, edi->unk00->GetName());
               QueueUIMessage(esp38.m_data, 0, 1, 5.0F);
               (*g_thePlayer)->unk674++;
               edx = edi->unk04;
               esp50.unk00 = edx;
               esp50.unk04 = false;
               esp50.unk05 = true;
               sub005A65B0(&esp50); // show region name?
               // esp38 destructor
            } else {
               // at 0x005A7160
               if (edi->unk00->AllowsFastTravel() && !(*g_thePlayer)->IsDead(0)) {
                  esp40.unk00 = edi->unk04;
                  esp40.unk44 = true;
                  if (GMST:iMapMarkerRevealDistance ?? esp24) {
                     esp44.unk04 = false;
                  }
                  esp44.unk08 = false;
                  sub005A65B0(&esp40); // show region name?
               }
            }
            // at 0x005A71B4
            if (GMST:iMapMarkerVisibleDistance >= esp24)
               continue;
            //
            // Recycle existing child nodes, and create more nodes as necessary.
            //
            Tile* esi;
            if (compassChild) { // NiTList<Tile*>::Node*
               // ecx = compassChild;
               esi = compassChild->data;
               // eax = &ecx->data; // not used; probably compiler junk
               compassChild = compassChild->next;
            } else {
               edx = esp28; // == this->tileCompassHeading
               esi = this->CreateTemplatedTile(esp28, "hudmain_compass_icon", 0);
            }
            if (!esi)
               continue;
            esp17 |= edi->unk00->IsVisible();
            NiVector3& eax = edi->unk04->GetPos();
            float esp34 = sub005A62D0(&esp5C, eax);
            esi->name.Replace_MinBufLen(edi->unk00->GetName(), 0); // at 0x005A7235
            esi->UpdateFloat(kTagID_user0, esp34);
            esi->UpdateFloat(kTagID_user1, esp24);
            esi->UpdateFloat(kTagID_user2, 2.0F);
            esi->UpdateFloat(kTagID_user5, edi->unk00->GetType());
            SInt32 esp24 = 1;
            if (edi->unk00->AllowsFastTravel() && esp17)
               esp24 = 2;
            esi->UpdateFloat(kTagID_user6, esp24);
            esi->UpdateFloat(kTagID_user9, 2.0F); // at 0x005A72DD
            esi->UpdateFloat(kTagID_depth, /*SInt32*/esp1C);
            esp1C++;
            esi->UpdateFloat(kTagID_visible, 2.0F);
            esi->UpdateFloat(kTagID_user11, 1.0F);
            esi->UpdateFloat(kTagID_user12, 1.0F);
         } while (esp2C);
      }
      // at 0x005A733F
      auto eax = esp20->unk64 = (*g_thePlayer)->sub0065D830();
      ebp = 0; // quest marker counter, used to ensure unique tile names
      if (eax) { // at 0x005A7355
         do {
            eax = esp2C;
            ecx = esp2C->unk00;
            if (!ecx)
               break;
            edi = ecx->unk10;
            edx = eax->unk04;
            bool esp17 = false;
            esp2C = esp2C->unk04;
            if (edi)
               esp17 = true;
            else
               edi = sub0052B440(1);
            if (!edi) // at 0x005A7392
               continue;
            NiVector3& eax = edi->GetPos();
            float esp34 = distance between eax and esp5C; // inlined // at 0x005A73ED
            esp34 = esp34; // m'kay
            esp34 = fabs(esp34);
            esp34 = esp34; // m'kay
            // FPU: [255 * esp34 / iMapMarkerRevealDistance, 255]
            float a = esp34 / GMST:iMapMarkerRevealDistance * 255.0;
            esp24 = a;
            // FPU: [255]
            if (esp24 ?? 255.0) {
               esp24 = 255.0;
            }
            // FPU: [255]
            // FPU: [esp24, 255]
            // FPU: [255 - (esp24 * 0.5)]
            esp24 = 255.0 - (esp24 * 0.5); // at 0x005A744A
            if (compassChild) { // NiTList<Tile*>::Node* // at 0x005A744E
               esi = compassChild->data;
               compassChild = compassChild->next;
            } else {
               esi = this->CreateTemplatedTile(esp28, "hudmain_compass_icon", 0);
            }
            if (!esi)
               continue;
            double esp54 = sub005A62D0(&esp5C, edi->GetPos());
            float a = (*g_thePlayer)->GetParentCell()->sub004CCE00();
            a *= 57.29577636718750;
            BSStringT esp38;
            ebp++;
            esp78 = 1;
            SprintfBSStringT(&esp38, "quest_%i", ebp);
            esi->SetNameAndDestroyArgument(BSStringT(esp38));
            esi->UpdateFloat(kTagID_user0, esp34);
            esi->UpdateFloat(kTagID_user5, 99.0F);
            esi->UpdateFloat(kTagID_user6, 1.0F);
            esi->UpdateFloat(kTagID_user9, 1.0F); // at 0x005A7558
            esi->UpdateFloat(kTagID_depth, esp1C);
            esp1C++;
            esi->UpdateFloat(kTagID_visible, 2.0F);
            esi->UpdateFloat(kTagID_alpha, esp24); // at 0x005A759B
            esi->UpdateFloat(kTagID_user10, esp17 ? 2 : 1);
            esi->UpdateFloat(kTagID_user11, 2.0F);
            esi->UpdateFloat(kTagID_user12, 1.0F);
            // esp38 destructor
         } while (esp2C);
      }
      // at 00x05A7615
      if ((*g_thePlayer)->unk638) {
         if (compassChild) { // NiTList<Tile*>::Node*
            esi = compassChild->data;
            compassChild = compassChild->next;
         } else {
            esi = this->CreateTemplatedTile(esp28, "hudmain_compass_icon", 0);
            edi = *g_thePlayer;
         }
         if (esi) { // at 0x005A765D
            if (auto ecx = (*g_thePlayer)->unk63C) {
               NiVector3& eax   = ecx->GetPos();
               NiVector3  esp40 = eax;
               edi = *g_thePlayer;
            } else {
               // at 0x005A7693
               NiVector3& eax   = (*g_thePlayer)->sub005A5790(&esp4C);
               NiVector3  esp40 = eax;
            }
            // at 0x005A76B3
            float a = edi->GetParentCell()->sub004CCE00() * 57.29577636718750;
            double esp4C = a;
            float b = sub005A62D0(&esp5C, &esp40); // at 0x005A76D5
            float esp3C = b * esp54;
            ebp++;
            BSStringT esp40;
            SprintfBSStringT(&esp40, "player_target_%i", ebp);
            esi->SetNameAndDestroyArgument(BSStringT(esp40));
            esi->UpdateFloat(kTagID_user0, esp34);
            esi->UpdateFloat(kTagID_user5, 99.0F);
            esi->UpdateFloat(kTagID_user6, 2.0F);
            esi->UpdateFloat(kTagID_user9, 1.0F); // at 0x005A7775
            esi->UpdateFloat(kTagID_depth, esp1C);
            esp1C++;
            esi->UpdateFloat(kTagID_visible, 2.0F);
            esi->UpdateFloat(kTagID_user11, 1.0F);
            esi->UpdateFloat(kTagID_user12, 2.0F);
            // destroy esp38
         }
      }
      // at 0x005A77E6
      this->tileCompassHeading->UpdateFloat(kTagID_user1, esp1C);
      if (compassChild) { // at 0x005A7803
         //
         // Don't delete child nodes from the compass; just hide them when they're 
         // unused.
         //
         esi = compassChild;
         do {
            eax = esi->data;
            esi = esi->next;
            eax->UpdateFloat(kTagID_visible, 1.0F);
         } while (esi);
      }
   }
   // at 0x005A782D
   bool al    = this->unk90;
   bool esp17 = al;
   if (al) { // at 0x005A783D
      auto ebp = this;
      for(UInt32 edi = 0; edi < this->unk84; edi++) {
         if (this->unk90 <= 0) // at 0x005A7859
            break;
         auto eax = this->unk7C[edi];
         if ((*eax)->GetFloatTraitValue(kTagID_alpha) ?? 0.0F)
            continue;
         auto eax = this->unk78.Unk_01(edi);
         delete eax;
         this->unk78.unk18 += 0xFF; // byte
      }
      edi = this; // at 0x005A78A0
      UInt32 eax = this->unk90; // byte
      UInt32 ecx = esp17;
      if (ecx - eax > 0) { // at 0x005A78B4
         this->unk78.sub005A56F0();
         for(UInt32 esi = 0; esi < this->unk84; esi++) {
            Tile** eax = this->unk7C[esi];
            Tile*  eax = *eax;
            eax->UpdateFloat(kTagID_user0, /*UInt32*/esi);
         }
      }
   }
   // at 0x005A78FF
   if (this->unk74) {
      if (GetTickCount() >= this->unk74) {
         esi = 0;
         esp78 = 3;
         esp5C.unk00 = 0;
         esp5C.unk04 = esi;
         esp5C.unk08 = 0;
         esp5C.unk0C = 0;
         SubroutineRelatedToShowingHUDMainMenuRegionName(&esp5C);
         esp78 = -1;
         delete esi; // delete nullptr?!
      }
   }
   // at 0x005A794B
   float a = (*g_thePlayer)->sub0065D270(0, 8);
   float esp18 = (a ?? 0) ? a : 0.0;
   SInt32 esp34 = (*g_thePlayer)->GetSkillLevel(8);
   // FPU: [0, esp34 + esp18]
   // FPU: [0]
   if (0.0 ?? esp34 + esp18) { // at 0x005A79A0
      // FPU: []
      esp18 = (*g_thePlayer)->GetSkillLevel(8) + esp18; // redundant; probably a "min" or "max" macro
   } else
      esp18 = 0.0;
   if (0.0 ?? esp18) { // at 0x005A79CC
      SInt32 esp2C = min_or_max_macro((*g_thePlayer)->Unk_A1(8), 0);
      esp18 = (float)esp2C / esp18;
   }
   // at 0x005A7A0C
   this->tileHealthBar->UpdateFloat(kTagID_user0, esp18);
   (*g_thePlayer)->sub0065D270(0, 9)
   esp18 = min_or_max_macro((*g_thePlayer)->sub0065D270(0, 9), 0);
   SInt32 esp34 = (*g_thePlayer)->GetSkillLevel(9); // at 0x005A7A5A
   //
   // ...
   //
   this->tileMagickaBar->UpdateFloat(kTagID_user0, esp18); // at 0x005A7AF2
   //
   // ...
   //
   this->tileStaminaBar->UpdateFloat(kTagID_user0, esp18; // at 0x005A7BC8
   esp18 = 100.0F;
   ExtraContainerChanges::EntryData* esi = (*g_thePlayer)->process->Unk_3B(true);
   if (esi) {
      esp18 = esi->GetHealth();
   }
   this->tileEquippedWeapon->UpdateFloat(kTagID_user2, esp18);
   if ((*g_thePlayer)->process->Unk_3D(true)) { // at 0x005A7C30
      if (esi) {
         esi = esi->unk08;
         if (esi) {
            if (esi->unk90 == 5) { // weapon type
               SInt32 esp34 = eax->unk04;
               esp18 = esp34;
            }
         }
      }
   }
   // at 0x005A7C59
   this->tileEquippedWeapon->UpdateFloat(kTagID_user3, esp18);
   esi = (*g_thePlayer)->unk5C.unk1C;
   eax = (*g_thePlayer)->GetEquippedMagicItem();
   UInt8 al = (*g_thePlayer)->unk5C.Unk_00(eax); // at 0x005A7C8E
   //
   // ...
   //
   this->tileEquippedSpell->UpdateFloat(kTagID_user2, (float)esp38); // at 0x005A7CAD
}