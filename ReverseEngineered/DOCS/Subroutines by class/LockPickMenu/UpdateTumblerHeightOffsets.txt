void LockPickMenu::UpdateTumblerHeightOffsets() {
   auto edi = this;
   auto eax = this->unk40;
   UInt32 ebp = (std::min)(0x64, this->unk40 - this->unk44);
   auto esp14 = 5;
   ebx = 0;
   auto i = 0;
   do {
      auto& current = this->tumblers[i];
      // FPU: [0, 47]
      if (current.isRaised == 1) { // at 0x005B086C
         if (current.isSolved == false) { // at 0x005B0875
            if (current.hangStart == -1) { // tumbler isn't experiencing hang time
               //
               // Apply gravity:
               //
               float esp10;
               if (current.unk1A) { // unk1A == first frame outside of hang time?
                  esp10 = 47.0F;
               } else {
                  esp10 = ebp; // the security skill can scale the tumbler movement speed?
               }
               // FPU: [47, 0]
               float a = 47.0F;
               float b = 0.0F;
               float x = current.unk10 * esp10;
               float y = current.velocity - x;
               esp10 = y;
               float esp18 = esp10;
               current.velocity = esp10;
               //
               //
               //
               // FPU: [47, 0]
               if (current.unk1A != 1) { // at 0x005B08C8
                  a = 0.0F + ebp; // esp10 used as intermediate for UInt32->float cast
                  // FPU: [0]
               } else
                  a = a; // implicit // FPU: [0]
               esp10 = a;
               // FPU: [0]
               float z = this->unk78; // maximum tumbler height offset
               current.unk1A = 0;
               z *= esp18;
               z *= esp10;
               z += current.heightOffset;
               current.heightOffset = z;
            } // else FPU = [0]
            if (this->unk78 < current.heightOffset) { // at 0x005B0909
               //
               // The ELSE for this branch definitely means that the tumbler is 
               // falling, so this must be the code for if it's NOT falling. 
               // Does that mean "hang time" or "rising?"
               //
               if (current.hangStart == -1) {
                  current.velocity = 0.0F;
                  current.hangStart = g_timeInfo->now;
                  this->PlaySoundByEditorID("UILockClickNow");
                  //
                  // This sound plays if you click during any moment where 
                  // clicking won't do anything, i.e. when the pick is under a 
                  // tumbler that's fully down or already solved.
                  //
               } // else FPU pop 1 element
               auto edx = g_timeInfo->now - current.hangStart;
               if (edx > current.hangTime) { // hang time is over
                  current.hangStart = UINT_MAX;
                  current.heightOffset = this->unk78;
               }
            } else {
               // at 0x005B094A
               //
               // Tumbler is falling.
               //
               if (0.0 >= current.heightOffset) {
                  //
                  // Tumbler is done falling.
                  //
                  auto ecx = current.unk24; // sound
                  if (ecx) {
                     if (ecx->sub006B7260())
                        ecx->sub006B7240();
                  }
                  current.heightOffset = 0.0F;
                  current.isRaised = false;
                  esp10 = 0.0F;
               }
            }
         } else { // solved tumbler
            // FPU: []
            float x = current.unk0C;
            float y = ebp;
            x *= y;
            x *= current.heightOffset;
            current.heightOffset = x;
            if (this->unk78 < x)
               current.heightOffset = this->unk78;
         }
      } else {
         // FPU: [47]
         if (!current.isSolved)
            current.velocity = 47.0F;
         // FPU: []
      }
      auto eax = OBLIVION_CAST(current.tile, Tile, Tile3D);
      if (!eax)
         continue;
      eax->unk58 = current.heightOffset; // animation progress override?
   } while (++i < 5);
}