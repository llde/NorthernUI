void LockPickMenu::Subroutine005B0E70() {
   auto esi = this;
   auto ui  = InterfaceManager_GetSingleton(0, 1);
   SInt32 cursorXOffset = GetNormalizedScreenWidth() * 0.5 + ebp->cursorPos.x; // edi
   SInt32 cursorYOffset = (GetEffectiveMenuHeight() * 0.5) - ebp->cursorPos.z;
   cursorXOffset -= this->tileBackground->GetFloatTraitValue(kTagID_x);
   cursorYOffset -= this->tileBackground->GetFloatTraitValue(kTagID_y);
   SetInterfaceManagerCursorAlpha(cursorYOffset < 650 ? 0 : 0xFF); // hide the cursor if it's in the minigame zone
   this->unk168 = -1;
   float minigameWidth = this->tileBackground->GetFloatTraitValue(kTagID_width); // esp18
   float tumblerSize   = (minigameWidth /= 5.0);
   bool esp13 = false; // "is any tumbler moving?"
   for(UInt32 i = 0; i < 5; i++) // inlined
      if (this->tumblers[i].isRaised)
         esp13 = true;
   SInt32 esp14;
   auto ecx = cursorXOffset < 0 ? 0 : cursorXOffset;
   if (ecx < (SInt32)minigameWidth)
      esp14 = cursorXOffset = 0;
   else
      esp14 = cursorXOffset = minigameWidth;
   ebp = 0;
   double esp20 = minigameWidth;
   // FPU: [0, minigameWidth]
   do { // at 0x005B0FAC
      float a = (ebp + 1) * tumblerSize; // tumbler right edge X-coordinate
      float b = a - tumblerSize;         // tumbler left edge X-coordinate
      if (cursorXOffset >= (SInt32)b && cursorXOffset < (SInt32)a)
         jump to 0x005B1002; // cursorXOffset is in the tumbler bounds
      } else if (ebp == 0) {
         if (cursorXOffset >= 0)
            continue;
      } else {
         if (ebp != 4)
            continue;
         // FPU: [0, minigameWidth]
         float c = esp14;
         float d = minigameWidth * 5.0;
         if (d > esp14)
            continue;
      }
      //
      // The cursor is within the tumbler's bounds.
      //
      // FPU: [0, minigameWidth]
      // at 0x005B1002
      if (!esp13) // no tumblers are in motion
         this->unk168 = ebp; // set the tumbler index that the pick is moving toward?
      if (0.0 < this->lockpickY && this->unk160 >= 0) { // lockpick is moving vertically and we have a valid tumbler
         Tumbler& x = this->tumbers[this->unk160]; // current tumbler
         if (0.0 == x.velocity && !x.isRaised && !x.isSolved) {
            //
            // Push a tumbler up.
            //
            // FPU: []
            this->PlaySoundByEditorID("UILockTumblerNudge");
            this->sub005AFDA0(this->unk160);
            ecx = x.unk24; // sound
            if (ecx && !ecx->sub006B7260()) { // at 0x005B1098
               //
               // ...
               //
            }
            float y = x.unk0C;
            x.velocity = y;
            x.unk1A = 1;
            x.heightOffset = 0.0;
            x.isRaised     = true;
            x.tile->UpdateFloat(kTagID_user0, 1.0F); // "UP" animation
            x.tile->sub0058FBA0(0); // update 3D
            // FPU: [0, esp20]
         }
      }
      Tile* eax = this->tumblers[ebp].tile;
      if (this->unk174 != eax)
         this->unk174 = eax;
   } while (++ebp < 5);
   // FPU: []
   this->UpdateTumblerHeightOffsets();
   //
   // Write the tumbler height offsets to tile state:
   //
   auto i = 0;
   do {
      float esp18 = this->tumblers[i].heightOffset;
      this->tumblers[i].tile->UpdateFloat(kTagID_user3, esp18);
   } while (++i < 5);
   //
   return;
}