inline float LockPickMenu::DistanceToTumbler() {
   auto& currentTumbler = this->tumblers[this->unk160];
   return abs(currentTumbler.unk1C - this->lockpickX);
}

void LockPickMenu::Subroutine005AFA80() {
   auto edi = OSInputGlobals::GetInstance();
   auto esi = this;
   auto yAxisMovement = edi->GetMouseAxisMovement(2); // NorthernUI patches this for gamepad
   edi = (std::min)(this->unk40 - this->unk44, 0x64); // security skill?
   float distanceBetweenTumblers = this->tumblers[1].unk1C - this->tumblers[0].unk1C;
   if (0.0 == this->unk158 && 0.0 == this->lockpickY) { // at 0x005AFAD2
      SInt32& currentTumblerCenter = &this->tumblers[this->unk160].unk1C;
      float b;
      //
      // If we're more than 4 UI-pixels away from the tumbler, then we move 
      // toward the tumbler three times as fast as we would if we were right 
      // at the tumbler.
      //
      if (this->DistanceToTumbler() > 4.0F) { // at 0x005AFB18
         this->pickIsUnderTumbler = false;
         if (currentTumblerCenter > this->lockpickX) { // at 0x005AFB32
            b = distanceBetweenTumblers / 300.0;
            this->lockpickX += b * edi;
         } else {
            UInt32 esp0C = edi;
            b = distanceBetweenTumblers / 300.0
            // FPU: [esp0C, b, this->lockpickX]
            // implicit jump to 0x005AFC1B
            b *= edi; // FPU: [b, this->lockpickX]
            b -= this->lockpickX; // FPU: [b]
            this->lockpickX = b;
         }
         // FPU: []
      } else {
         if (1.0F < this->DistanceToTumbler()) { // at 0x005AFB9F
            // jumped to 0x005AFC2F
            this->pickIsUnderTumbler = true;
         } else {
            this->pickIsUnderTumbler = false;
            if (currentTumblerCenter > this->lockpickX) { // at 0x005AFBBB
               b = distanceBetweenTumblers / 900.0;
               this->lockpickX += b * edi;
            } else {
               b = distanceBetweenTumblers / 900.0;
               // FPU: [esp0C, b, this->lockpickX]
               // implicit jump to 0x005AFC1B
               b *= esp0C; // FPU: [b, this->lockpickX]
               b -= this->lockpickX; // FPU: [b]
               this->lockpickX = b;
            }
         }
      }
      // at 0x005AFC36
      this->tileLockpick->UpdateFloat(0xFB0, this->lockpickX);
      // FPU: [0]
   }
   // FPU: [0]
   if (yAxisMovement < -3 && 0.0 >= this->unk158 && this->DistanceToTumbler() <= 3.0) {
      this->unk158 = this->unk154;
   } else {
      // at 0x005AFCA9
      float esp0C = edi;
      // FPU: [esp0C, esp0C, this->unk15C, 0]
      // FPU: [esp0C, this->unk15C * esp0C, 0]
      // FPU: [this->unk15C * esp0C, esp0C, 0]
      // FPU: [this->unk158 - (this->unk15C * esp0C), esp0C, 0]
      float a = esp0C;
      float b = this->unk158 - (this->unk15C * a);
      this->unk158 = b;
      // FPU: [b, a, 0]
      // FPU: [b * a, 0]
      esp0C = (a * b) + this->lockpickY;
      this->lockpickY = esp0C;
      if (esp0C < 0.0) {
         this->unk158    = 0.0F;
         this->lockpickY = 0.0F;
      }
   }
   ecx = 290 - (SInt32)this->lockpickY;
   this->tileLockpick->UpdateFloat(0xFB1, ecx);
}